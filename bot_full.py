import os
import logging
import asyncio
import pandas as pd
import io
import numpy as np
from datetime import datetime
import re
import json
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')

if not TELEGRAM_BOT_TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

print("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
print("üöÄ –ë–£–•–ì–ê–õ–¢–ï–†–°–ö–ò–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ó–ê–ü–£–©–ï–ù...")

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
os.makedirs("temp_files", exist_ok=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECT_INDICATORS, SELECT_INDUSTRY = range(2)

# –°–ª–æ–≤–∞—Ä–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
BALANCE_ITEMS = {
    # –ê–ö–¢–ò–í–´
    '–≤–Ω–µ–æ–±–æ—Ä–æ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã': ['–≤–Ω–µ–æ–±–æ—Ä–æ—Ç–Ω—ã–µ', 'non-current', '–æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', '–Ω–µ–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ', '–Ω–º–∞'],
    '–æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞': ['–æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'fixed assets', 'property plant', '–æ—Å–Ω–æ–≤–Ω–æ–π', '–æ—Å—è'],
    '–Ω–µ–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã': ['–Ω–µ–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ', 'intangible', '–Ω–º–∞'],
    '–∑–∞–ø–∞—Å—ã': ['–∑–∞–ø–∞—Å—ã', 'inventories', 'inventory', '—Ç–æ–≤–∞—Ä–Ω–æ-–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ', '—Ç–º—Ü'],
    '–¥–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å': ['–¥–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è', 'accounts receivable', 'receivables', '–¥–µ–±–∏—Ç–æ—Ä'],
    '–¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞': ['–¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'cash', 'cash and equivalents', '–¥–µ–Ω—å–≥–∏', '–∫–∞—Å—Å–∞', '—Ä–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç'],
    '–æ–±–æ—Ä–æ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã': ['–æ–±–æ—Ä–æ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã', 'current assets', '–æ–±–æ—Ä–æ—Ç–Ω—ã–µ'],
    '–∞–∫—Ç–∏–≤—ã –≤—Å–µ–≥–æ': ['–∞–∫—Ç–∏–≤—ã', '–∞–∫—Ç–∏–≤ –≤—Å–µ–≥–æ', 'total assets', '–∏—Ç–æ–≥–æ –∞–∫—Ç–∏–≤—ã', '–±–∞–ª–∞–Ω—Å –∞–∫—Ç–∏–≤'],
    
    # –ü–ê–°–°–ò–í–´
    '–∫–∞–ø–∏—Ç–∞–ª': ['–∫–∞–ø–∏—Ç–∞–ª', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª', 'equity', 'share capital', '—É—Å—Ç–∞–≤–Ω—ã–π'],
    '—É—Å—Ç–∞–≤–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª': ['—É—Å—Ç–∞–≤–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª', 'authorized capital', '—É—Å—Ç–∞–≤–Ω–æ–π'],
    '–Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å': ['–Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å', 'retained earnings', '–ø—Ä–∏–±—ã–ª—å –æ—Ç—á–µ—Ç–Ω–æ–≥–æ –≥–æ–¥–∞'],
    '–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞': ['–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞', 'long-term liabilities', '–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ'],
    '–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞': ['–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞', 'short-term liabilities', 'current liabilities', '–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ'],
    '–∫—Ä–µ–¥–∏—Ç—ã –∑–∞–π–º—ã': ['–∫—Ä–µ–¥–∏—Ç—ã', '–∑–∞–π–º—ã', 'loans', 'borrowings', '–∫—Ä–µ–¥–∏—Ç'],
    '–∫—Ä–µ–¥–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å': ['–∫—Ä–µ–¥–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å', 'accounts payable', '–∫—Ä–µ–¥–∏—Ç–æ—Ä—Å–∫–∞—è'],
    '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—Å–µ–≥–æ': ['–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞', '–ø–∞—Å—Å–∏–≤ –≤—Å–µ–≥–æ', 'total liabilities', '–∏—Ç–æ–≥–æ –ø–∞—Å—Å–∏–≤—ã', '–±–∞–ª–∞–Ω—Å –ø–∞—Å—Å–∏–≤'],
    
    # –û–§–†
    '–≤—ã—Ä—É—á–∫–∞': ['–≤—ã—Ä—É—á–∫–∞', 'revenue', 'sales', '–¥–æ—Ö–æ–¥', '–æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'],
    '—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å': ['—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å', 'cost of sales', 'cost', '—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂'],
    '–≤–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å': ['–≤–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å', '—É–±—ã—Ç–æ–∫', 'gross profit', '–ø—Ä–∏–±—ã–ª—å –≤–∞–ª–æ–≤–∞—è'],
    '–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã': ['–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã', 'operating expenses', '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', '—É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã'],
    '–ø—Ä–∏–±—ã–ª—å –¥–æ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è': ['–ø—Ä–∏–±—ã–ª—å –¥–æ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è', 'profit before tax', '–ø—Ä–∏–±—ã–ª—å –¥–æ –Ω–∞–ª–æ–≥–∞'],
    '—á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å': ['—á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', 'net profit', 'net income', '–ø—Ä–∏–±—ã–ª—å —á–∏—Å—Ç–∞—è']
}

INDUSTRY_STANDARDS = {
    'retail': {
        'name': '–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è',
        'standards': {
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏': (1.2, 2.0),
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏': (0.2, 0.5),
            '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ (ROS)': (3.0, 8.0),
            '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤ (ROA)': (5.0, 12.0),
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–≤—Ç–æ–Ω–æ–º–∏–∏': (0.3, 0.6),
            '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤': (1.5, 3.0)
        }
    },
    'manufacturing': {
        'name': '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
        'standards': {
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏': (1.5, 2.5),
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏': (0.1, 0.3),
            '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ (ROS)': (8.0, 15.0),
            '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤ (ROA)': (6.0, 14.0),
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–≤—Ç–æ–Ω–æ–º–∏–∏': (0.4, 0.7),
            '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤': (0.8, 1.5)
        }
    },
    'services': {
        'name': '–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥',
        'standards': {
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏': (1.0, 1.8),
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏': (0.3, 0.6),
            '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ (ROS)': (10.0, 20.0),
            '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤ (ROA)': (8.0, 18.0),
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–≤—Ç–æ–Ω–æ–º–∏–∏': (0.4, 0.7),
            '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤': (1.0, 2.5)
        }
    }
}

INDICATOR_GROUPS = {
    '–í—ã—Ä—É—á–∫–∞ –∏ –ø—Ä–∏–±—ã–ª—å': ['–≤—ã—Ä—É—á–∫–∞', '—á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', '–≤–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å', '–ø—Ä–∏–±—ã–ª—å –¥–æ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è'],
    '–ê–∫—Ç–∏–≤—ã –∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞': ['–∞–∫—Ç–∏–≤—ã –≤—Å–µ–≥–æ', '–æ–±–æ—Ä–æ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã', '–≤–Ω–µ–æ–±–æ—Ä–æ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã', '–∫–∞–ø–∏—Ç–∞–ª', '–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞'],
    '–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å': ['–¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', '–¥–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å', '–∑–∞–ø–∞—Å—ã'],
    '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å': ['–≤—ã—Ä—É—á–∫–∞', '—á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', '–∞–∫—Ç–∏–≤—ã –≤—Å–µ–≥–æ', '–∫–∞–ø–∏—Ç–∞–ª'],
    '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å': ['–∫–∞–ø–∏—Ç–∞–ª', '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—Å–µ–≥–æ', '–∞–∫—Ç–∏–≤—ã –≤—Å–µ–≥–æ'],
    '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å': ['–≤—ã—Ä—É—á–∫–∞', '–∑–∞–ø–∞—Å—ã', '–¥–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å', '–∞–∫—Ç–∏–≤—ã –≤—Å–µ–≥–æ']
}

# === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–ó–ê ===

def read_excel_file(file_bytes, file_name):
    """–ß–∏—Ç–∞–µ—Ç Excel —Ñ–∞–π–ª —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    try:
        if file_name.endswith('.xls'):
            return pd.read_excel(io.BytesIO(file_bytes), engine='xlrd')
        else:
            return pd.read_excel(io.BytesIO(file_bytes), engine='openpyxl')
    except Exception as e:
        try:
            return pd.read_excel(io.BytesIO(file_bytes))
        except Exception as e2:
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {str(e2)}")

def detect_periods(df):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥—ã –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö DataFrame"""
    periods = []
    
    for col in df.columns:
        col_str = str(col).lower().strip()
        
        # –ü–æ–∏—Å–∫ –¥–∞—Ç –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        date_patterns = [
            r'\d{2}.\d{2}.\d{4}',  # 31.12.2023
            r'\d{4}-\d{2}-\d{2}',   # 2023-12-31
            r'\d{2}/\d{2}/\d{4}',   # 31/12/2023
        ]
        
        for pattern in date_patterns:
            matches = re.findall(pattern, col_str)
            if matches:
                try:
                    date_str = matches[0]
                    if '.' in date_str and len(date_str.split('.')[0]) == 2:
                        date_obj = datetime.strptime(date_str, '%d.%m.%Y')
                    elif '-' in date_str:
                        date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                    elif '/' in date_str:
                        date_obj = datetime.strptime(date_str, '%d/%m/%Y')
                    
                    periods.append({
                        'column': col,
                        'date': date_obj,
                        'formatted': date_obj.strftime('%d.%m.%Y'),
                        'year': date_obj.year
                    })
                    break
                except:
                    continue
        
        # –ü–æ–∏—Å–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        period_keywords = {
            '–∑–∞ 2024': '2024',
            '–∑–∞ 2023': '2023',
            '–∑–∞ 2022': '2022',
        }
        
        for keyword, year in period_keywords.items():
            if keyword in col_str:
                periods.append({
                    'column': col,
                    'date': datetime(int(year), 12, 31),
                    'formatted': f"31.12.{year}",
                    'year': int(year)
                })
                break
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –≥–æ–¥—É
    periods.sort(key=lambda x: x['year'])
    return periods

def find_balance_item(column_name, df_columns):
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–æ–ª–±—Ü–∞ —Å—Ç–∞—Ç—å—è–º –±–∞–ª–∞–Ω—Å–∞"""
    column_name = str(column_name).lower().strip()
    
    for item, keywords in BALANCE_ITEMS.items():
        for keyword in keywords:
            if keyword in column_name:
                return item
    
    return None

def extract_financial_data_by_period(df, periods):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º"""
    financial_data = {}
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    for period in periods:
        financial_data[period['formatted']] = {}
    
    # –ò—â–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    indicator_column = None
    for col in df.columns:
        if '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in str(col).lower() or '–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å' in str(col).lower():
            indicator_column = col
            break
    
    if not indicator_column:
        return financial_data
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    for row_idx in range(len(df)):
        indicator_name = str(df[indicator_column].iloc[row_idx]).strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if not indicator_name or indicator_name in ['–ê–∫—Ç–∏–≤', '–ü–∞—Å—Å–∏–≤', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è']:
            continue
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
        item = find_balance_item(indicator_name, [indicator_name])
        
        if item:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            for period in periods:
                period_key = period['formatted']
                col_name = period['column']
                
                try:
                    value = pd.to_numeric(df[col_name].iloc[row_idx], errors='coerce')
                    if not pd.isna(value) and value != 0:
                        financial_data[period_key][item] = value
                except:
                    continue
    
    return financial_data

def calculate_financial_ratios_for_period(data):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    ratios = {}
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        assets = data.get('–∞–∫—Ç–∏–≤—ã –≤—Å–µ–≥–æ', 0)
        current_assets = data.get('–æ–±–æ—Ä–æ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã', 0)
        cash = data.get('–¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', 0)
        receivables = data.get('–¥–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å', 0)
        inventory = data.get('–∑–∞–ø–∞—Å—ã', 0)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±–æ—Ä–æ—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤, –Ω–æ –µ—Å—Ç—å –∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
        if current_assets == 0:
            current_assets = cash + receivables + inventory
        
        equity = data.get('–∫–∞–ø–∏—Ç–∞–ª', 0)
        current_liabilities = data.get('–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞', 0)
        total_liabilities = data.get('–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—Å–µ–≥–æ', 0)
        
        revenue = data.get('–≤—ã—Ä—É—á–∫–∞', 0)
        net_profit = data.get('—á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', 0)
        
        # 1. –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´ –õ–ò–ö–í–ò–î–ù–û–°–¢–ò
        if current_liabilities > 0:
            ratios['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏'] = current_assets / current_liabilities
            ratios['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏'] = cash / current_liabilities
        
        # 2. –†–ï–ù–¢–ê–ë–ï–õ–¨–ù–û–°–¢–¨
        if assets > 0:
            ratios['–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤ (ROA)'] = (net_profit / assets) * 100
        if equity > 0:
            ratios['–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–ø–∏—Ç–∞–ª–∞ (ROE)'] = (net_profit / equity) * 100
        if revenue > 0:
            ratios['–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ (ROS)'] = (net_profit / revenue) * 100
        
        # 3. –§–ò–ù–ê–ù–°–û–í–ê–Ø –£–°–¢–û–ô–ß–ò–í–û–°–¢–¨
        if assets > 0:
            ratios['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–≤—Ç–æ–Ω–æ–º–∏–∏'] = equity / assets
        
        # 4. –î–ï–õ–û–í–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨
        if assets > 0:
            ratios['–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤'] = revenue / assets
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
    
    return ratios

# === –§–£–ù–ö–¶–ò–ò –ì–ï–ù–ï–†–ê–¶–ò–ò –û–¢–ß–ï–¢–û–í ===

def generate_period_analysis_report(periods_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º"""
    if not periods_data:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º."
    
    report = "üìä **–§–ò–ù–ê–ù–°–û–í–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ü–ï–†–ò–û–î–ê–ú**\n\n"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    report += "üí∞ **–î–ò–ù–ê–ú–ò–ö–ê –û–°–ù–û–í–ù–´–• –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô:**\n\n"
    
    key_indicators = ['–≤—ã—Ä—É—á–∫–∞', '—á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', '–∞–∫—Ç–∏–≤—ã –≤—Å–µ–≥–æ', '–∫–∞–ø–∏—Ç–∞–ª']
    
    for indicator in key_indicators:
        values = []
        for period, data in periods_data.items():
            if data and indicator in data:
                values.append((period, data[indicator]))
        
        if values:
            report += f"üìà **{indicator.title()}:**\n"
            for period, value in values:
                report += f"‚Ä¢ {period}: {value:,.0f} —Ä—É–±.\n"
            
            # –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏
            if len(values) >= 2:
                first_val = values[0][1]
                last_val = values[-1][1]
                change_abs = last_val - first_val
                change_rel = ((last_val - first_val) / first_val * 100) if first_val != 0 else 0
                trend = "üìà" if change_rel > 0 else "üìâ" if change_rel < 0 else "‚û°Ô∏è"
                report += f"  {trend} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_abs:+,.0f} —Ä—É–±. ({change_rel:+.1f}%)\n"
            
            report += "\n"
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    report += "üìä **–§–ò–ù–ê–ù–°–û–í–´–ï –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´:**\n\n"
    
    for period, data in periods_data.items():
        if data:
            ratios = calculate_financial_ratios_for_period(data)
            if ratios:
                report += f"**{period}:**\n"
                for ratio_name, value in ratios.items():
                    if '—Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å' in ratio_name.lower():
                        report += f"‚Ä¢ {ratio_name}: {value:.1f}%\n"
                    else:
                        report += f"‚Ä¢ {ratio_name}: {value:.2f}\n"
                report += "\n"
    
    return report

def generate_liquidity_analysis_report(periods_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
    report = "üíß **–ê–ù–ê–õ–ò–ó –õ–ò–ö–í–ò–î–ù–û–°–¢–ò**\n\n"
    
    for period, data in periods_data.items():
        if data:
            ratios = calculate_financial_ratios_for_period(data)
            if '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏' in ratios:
                cr = ratios['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏']
                report += f"**{period}:**\n"
                report += f"‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {cr:.2f}\n"
                
                if cr >= 2.0:
                    report += "  ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å\n"
                elif cr >= 1.5:
                    report += "  ‚ö†Ô∏è –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å\n"
                elif cr >= 1.0:
                    report += "  üü° –ü–æ–Ω–∏–∂–µ–Ω–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å\n"
                else:
                    report += "  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å\n"
                
                report += "\n"
    
    return report

# === –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [KeyboardButton("üìä –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑"), KeyboardButton("üéØ –í—ã–±–æ—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑")],
        [KeyboardButton("üìà –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"), KeyboardButton("üíé –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏")],
        [KeyboardButton("üèõÔ∏è –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"), KeyboardButton("üìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º–∏")],
        [KeyboardButton("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π"), KeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ TXT")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "ü§ñ **–§–ò–ù–ê–ù–°–û–í–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–†**\n\n"
        "üöÄ –ë–æ—Ç —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∑–∞–ø—É—â–µ–Ω!\n\n"
        "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ **–§–ò–ù–ê–ù–°–û–í–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø**

üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ üìä –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
‚Ä¢ üéØ –í—ã–±–æ—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –Ω—É–∂–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏  
‚Ä¢ üìà –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
‚Ä¢ üíé –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ üèõÔ∏è –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å - —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ üìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ - –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã
‚Ä¢ üîÆ –ü—Ä–æ–≥–Ω–æ–∑ - –±—É–¥—É—â–∏–µ —Ç—Ä–µ–Ω–¥—ã
‚Ä¢ üìÑ TXT - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç

üìÅ **–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:**
Excel —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥—ã:
‚Ä¢ 31.12.2023, 31.12.2022
‚Ä¢ –ó–∞ 2023 –≥–æ–¥, –ó–∞ 2022 –≥–æ–¥
"""
    await update.message.reply_text(help_text)

async def receive_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–æ–≤"""
    try:
        if not update.message.document:
            await update.message.reply_text("üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ Excel —Ñ–∞–π–ª")
            return

        file = update.message.document
        file_name = file.file_name.lower()

        if not (file_name.endswith('.xlsx') or file_name.endswith('.xls')):
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls)")
            return

        await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞...")

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_obj = await file.get_file()
        file_bytes = await file_obj.download_as_bytearray()

        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        try:
            df = read_excel_file(file_bytes, file_name)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥—ã
        periods = detect_periods(df)
        
        if not periods:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥—ã –≤ —Ñ–∞–π–ª–µ")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        periods_data = extract_financial_data_by_period(df, periods)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.update({
            'periods_data': periods_data,
            'file_name': file_name
        })
        
        extracted_count = sum(len(data) for data in periods_data.values())
        await update.message.reply_text(
            f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n"
            f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {extracted_count}\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥–æ–≤: {len(periods)}\n\n"
            f"üéØ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞!"
        )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")

async def perform_full_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    if 'periods_data' not in context.user_data:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏")
        return
    
    await update.message.reply_text("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–ª–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑...")
    
    periods_data = context.user_data['periods_data']
    report = generate_period_analysis_report(periods_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
    context.user_data['last_analysis'] = report
    
    if len(report) > 4000:
        parts = [report[i:i+4000] for i in range(0, len(report), 4000)]
        for part in parts:
            await update.message.reply_text(part)
    else:
        await update.message.reply_text(report)

async def perform_liquidity_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
    if 'periods_data' not in context.user_data:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏")
        return
    
    await update.message.reply_text("üíß –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å...")
    
    periods_data = context.user_data['periods_data']
    report = generate_liquidity_analysis_report(periods_data)
    
    context.user_data['last_analysis'] = report
    
    await update.message.reply_text(report)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    
    if text == "üìä –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
        await perform_full_analysis(update, context)
    elif text == "üìà –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏":
        await perform_liquidity_analysis(update, context)
    elif text == "üíé –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏":
        await update.message.reply_text("üíé –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å...\n\nüîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif text == "üèõÔ∏è –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å":
        await update.message.reply_text("üèõÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å...\n\nüîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif text == "üìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º–∏":
        await update.message.reply_text("üè≠ –°—Ä–∞–≤–Ω–∏–≤–∞—é —Å –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º–∏...\n\nüîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif text == "üîÆ –ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π":
        await update.message.reply_text("üîÆ –°—Ç—Ä–æ—é –ø—Ä–æ–≥–Ω–æ–∑...\n\nüîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif text == "üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ TXT":
        await update.message.reply_text("üìÑ –°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç...\n\nüîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif text == "üéØ –í—ã–±–æ—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
        await update.message.reply_text("üéØ –í—ã–±–æ—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑...\n\nüîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif text == "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
        await update.message.reply_text("üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é")
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.Document.ALL, receive_document))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("‚úÖ –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!")
    print("üåê –†–µ–∂–∏–º: POLLING")
    print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
